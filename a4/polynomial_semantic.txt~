[Warning, Symbol already exists: ,symbol([scope("POLYNOMIAL",struct),scope(global,program)],function,"float","evaluate")]
[Warning, Symbol already exists: ,symbol([scope("POLYNOMIAL",struct),scope(global,program)],param_decl,"evaluate","float","x")]
[Warning, Symbol already exists: ,symbol([scope("QUADRATIC",struct),scope(global,program)],function,"QUADRATIC","build")]
[Warning, Symbol already exists: ,expression([scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(intnum,["1"])]),[]])]),[]]))]
[Warning, function has no body: ,[scope("f",func_def),scope(global,program)]]
[Warning, Symbol already exists: ,symbol([scope("f",func_def),scope(global,program)],function,"void","f")]
[Warning, Symbol already exists: ,symbol([scope("f",func_def),scope(global,program)],param,"integer","i")]
[Warning, function has no body: ,[scope("f",func_def),scope(global,program)]]
[Warning, Symbol already exists: ,symbol([scope("f",func_def),scope(global,program)],param,"integer","i")]
[Warning, function has no body: ,[scope("f",func_def),scope(global,program)]]
"error: "[Warning, function has no body: ,[scope("f3",func_def),scope(global,program)]]
"error: ""error: "[Warning, Symbol already exists: ,expression([scope("main",func_def),scope(global,program)],node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(intnum,["1"])]),[]])]),[]]))]
[Warning, Symbol already exists: ,expression([scope("main",func_def),scope(global,program)],node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(intnum,["1"])]),[]])]),[]]))]
[Warning, Symbol already exists: ,symbol([scope("main",func_def),scope(global,program)],func_call,"evaluate",1)]
["Expression type mismatch:
",expression([scope("main",func_def),scope(global,program)],node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(id,["f1"]),[],node(id_nest,[node(id,[node(dot,[node(idnest,[terminal(id,["build"]),node(func_call,[node(aparam,[node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(intnum,["2"])]),[]])]),[]]),node(aparam,[node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(floatnum,[["3",".","5"]])]),[]])]),[]]),[]])])])])])])])]),[]])]),[]]))]
["integer","float","integer","float","integer","float","integer","float"]
