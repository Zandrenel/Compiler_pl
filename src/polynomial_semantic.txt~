[Warning, Symbol already exists: ,symbol([scope("QUADRATIC",struct),scope(global,program)],function,"QUADRATIC","build")]
[Warning, Symbol already exists: ,symbol([scope("main",func_def),scope(global,program)],func_call,"evaluate",1)]
["Expression type mismatch:
",expression([scope("main",func_def),scope(global,program)],node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(id,["f1"]),[],node(id_nest,[node(id,[node(dot,[node(idnest,[terminal(id,["build"]),node(func_call,[node(aparam,[node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(intnum,["2"])]),[]])]),[]]),node(aparam,[node(expr,[node(arith_expr,[node(term,[node(factor,[terminal(floatnum,["3.5"])]),[]])]),[]]),[]])])])])])])])]),[]])]),[]]))]
["integer","float","integer","float","integer","float","integer","float"]
[undeclared ID,[scope("POLYNOMIAL",struct),scope(global,program)],"POLYNOMIAL"]
[undeclared ID,[scope("LINEAR",struct),scope(global,program)],"LINEAR"]
[undeclared ID,[scope("LINEAR",struct),scope(global,program)],"POLYNOMIAL"]
[undeclared ID,[scope("QUADRATIC",struct),scope(global,program)],"QUADRATIC"]
[undeclared ID,[scope("QUADRATIC",struct),scope(global,program)],"POLYNOMIAL"]
[undeclared ID,[scope("QUADRATIC",struct),scope(global,program)],"A"]
[undeclared ID,[scope("QUADRATIC",struct),scope(global,program)],"B"]
[undeclared ID,[scope("QUADRATIC",struct),scope(global,program)],"C"]
[undeclared ID,[scope("POLYNOMIAL",impl_def),scope(global,program)],"POLYNOMIAL"]
[undeclared Func,"evaluate"]
[undeclared ID,[scope("QUADRATIC",impl_def),scope(global,program)],"QUADRATIC"]
[undeclared Func,"evaluate"]
[undeclared ID,[scope("evaluate",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"a"]
[undeclared ID,[scope("evaluate",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"b"]
[undeclared ID,[scope("evaluate",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"c"]
[undeclared Func,"build"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"A"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"B"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"C"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"a"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"A"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"b"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"B"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"c"]
[undeclared ID,[scope("build",func_def),scope("QUADRATIC",impl_def),scope(global,program)],"C"]
[undeclared ID,[scope("LINEAR",impl_def),scope(global,program)],"LINEAR"]
[undeclared Func,"build"]
[undeclared ID,[scope("build",func_def),scope("LINEAR",impl_def),scope(global,program)],"a"]
[undeclared ID,[scope("build",func_def),scope("LINEAR",impl_def),scope(global,program)],"b"]
[undeclared Func,"evaluate"]
[undeclared ID,[scope("evaluate",func_def),scope("LINEAR",impl_def),scope(global,program)],"a"]
[undeclared ID,[scope("evaluate",func_def),scope("LINEAR",impl_def),scope(global,program)],"b"]
[undeclared Func,"main"]
[undeclared Func,[scope("main",func_def),scope(global,program)]]
[undeclared Func,[scope("main",func_def),scope(global,program)]]
[undeclared Func,[scope("main",func_def),scope(global,program)]]
[undeclared Func,[scope("main",func_def),scope(global,program)]]
